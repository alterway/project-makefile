export PROJECT_SUBNET_PREFIX ?=192.14
export CONSUL_URL ?=localhost:8500

export NETWORK_DRIVER ?=bridge
export NETWORK_SUBNET ?=--subnet ${PROJECT_SUBNET_PREFIX}
export NETWORK_NAME ?=${PROJECT_NAME}_default

export VOLUME_PREFIX ?= ../../../../..
export OPTIONS_COMP ?=--no-dev

########################################################################################################################
####                                                 COMMAND ALIASES                                                ####
########################################################################################################################
docker-compose 	     = docker-compose -f ${PWD}/config/docker/${SUFFIX_VS}/${INFRA_ENV}/${SERVICE_NAME}/docker-compose.yml -p ${PROJECT_NAME}
docker-tools         = docker-compose -f ${PWD}/config/docker/${SUFFIX_VS}/${INFRA_ENV}/default/docker-compose-command.yml -p ${PROJECT_NAME}
docker-phpunit       = docker-compose -f ${PWD}/config/docker/${SUFFIX_VS}/${INFRA_ENV}/default/docker-compose-phpunit.yml -p ${PROJECT_NAME}
docker-behat         = docker-compose -f ${PWD}/config/docker/${SUFFIX_VS}/${INFRA_ENV}/default/docker-compose-behat.yml -p ${PROJECT_NAME}
docker-html-minifier = docker-compose -f ${PWD}/config/docker/${SUFFIX_VS}/${INFRA_ENV}/default/docker-compose-html-minifier.yml -p ${PROJECT_NAME}

########################################################################################################################
####                                                      STACK                                                     ####
########################################################################################################################

help:
	@echo "Usage: make COMMAND"
	@cat README.md |grep '| make' | column -t -s \|

# --> INSTALL <--#
# ---------------#
install-dnsmasq:
	@apt-get install -y dnsmasq ${OUTPUT}
	@sh -c "echo address=/dev/$${IP:-127.0.0.1} > /etc/dnsmasq.d/dev.conf"
	#@echo "nameserver 127.0.0.1" >> /etc/resolv.conf # Cela permet d'affecter les noms de domaine du serveur de noms local.
	@/etc/init.d/dnsmasq restart ${OUTPUT}

install-git-hooks:
	@git config credential.helper store && git config core.fileMode false && git config --global core.autocrlf false
	@(./config/hooks/init/init.sh ${OUTPUT}) || true

reinstall: uninstall install

uninstall: stop rm

install: check-composer pull-tools up prepare-services #prepare-esb

# --> INIT <--#
# ------------#
init: install-git-hooks init-network init-volumes

init-volumes:
	@(mkdir -p ${VOLUMES_SHARED}) || true

init-network:
	@./config/pipeline/bootstrap.sh --job=deploy:create_network \
		--service="${SERVICE_NAME}" \
		--ci-build-ref-name="${CI_COMMIT_REF_NAME}" \
		--job-network-name="${NETWORK_NAME}" \
		--job-network-driver="${NETWORK_DRIVER}" \
		--job-network-subnet="${NETWORK_SUBNET}" \
		--job-network-labels="${NETWORK_LABELS:-}" \
		-v

# --> DOCKER STRATEGY <--#
# -----------------------#
build:
	@$(MAKE) -B -f config/makefile/Makefile-docker-images  $@

pull-tools:
	@${docker-compose} pull || true # && ${docker-tools} pull || true && ${docker-behat} pull || true
	@#ENV_NAME=.env.orm && PHP_ENV=php.env.orm && ${docker-phpunit} pull || true

stop:
	@${docker-compose} stop

rm:
	@${docker-compose} rm --force
	@sleep 20 # tobe sure that th network service has been delete correctly if no services are in it

up: init
	@(make prepare-composer-install OPTIONS_COMP="${OPTIONS_COMP}") || true # cmd execute to launch composer with memory_limit=-1
	@make -s deploy

deploy:
	@${docker-compose} up -d --build

# make prepare-services SYMFONY__DOCTRINE__MIGRATION__OPTIONS='--debug false --currentVersion 1518433964'
prepare-services: init-volumes
	@for service in ${PHP_INIT_SERVICES}; do ${docker-compose} run --rm $${service} init ; done

########################################################################################################################
####                                                    PIPELINE                                                    ####
########################################################################################################################
prepare-artifact-analyse: init-volumes
	@SERVICE_NAME=default && ${docker-tools} run --rm php-cmd phing -f build.xml prepare:artifact-analyse verify:normal

prepare-artifact-project: init-volumes
	@SERVICE_NAME=default && ${docker-tools} run --rm php-cmd phing -f build.xml prepare:artifact-project verify:normal

#----------------------------------------------------------------------------------------------------------------------#
#                                                   ESB COMMAND                                                        #
#----------------------------------------------------------------------------------------------------------------------#
prepare-esb: init-volumes
	@if [ -z "$$OPTIONS_ESB" ]; then OPTIONS_ESB=""; fi; \
		SERVICE_NAME=default && ${docker-tools} run --rm  php-cmd phing -f build.xml esb:build $$OPTIONS_ESB

#----------------------------------------------------------------------------------------------------------------------#
#                                                   COMPOSER COMMAND                                                   #
#----------------------------------------------------------------------------------------------------------------------#
check-composer:
	@if [ $(date -d 'now - 3 weeks' '+%s') -gt $(date -r www/composer.lock '+%s') ]; then echo 'WARNING! You did not update your composer dependencies since a long time ago. You should update.'; fi

# make prepare-composer-install OPTIONS_COMP='--no-scripts,-vvv'
prepare-composer-install:
	@SERVICE_NAME=default && ${docker-tools} run --rm php-cmd phing -f build.xml prepare:composer-install -Dcomposer.options=$$OPTIONS_COMP -Dcomposer.dump.options=$$OPTIONS_COMP_DUMP

# make prepare-composer-update OPTIONS_COMP="sfynx-project/tool-migration-bundle,sfynx-project/tool-behat-bundle"
prepare-composer-update:
	@SERVICE_NAME=default &&  ${docker-tools} run --rm php-cmd phing -f build.xml prepare:composer-update -Dcomposer.options=$$OPTIONS_COMP -Dcomposer.dump.options=$$OPTIONS_COMP_DUMP

# make prepare-composer-require OPTIONS_COMP="--dev,sfynx-project/tool-migration-bundle,sfynx-project/tool-behat-bundle"
prepare-composer-require:
	@SERVICE_NAME=default && ${docker-tools} run --rm php-cmd phing -f build.xml prepare:composer-require -Dcomposer.options=$$OPTIONS_COMP -Dcomposer.dump.options=$$OPTIONS_COMP_DUMP

# make prepare-composer-autoload OPTIONS_COMP='--no-dev'
prepare-composer-autoload:
	@SERVICE_NAME=default && ${docker-tools} run --rm  php-cmd phing -f build.xml composer:dump -Dcomposer.dump.options=$$OPTIONS_COMP

#----------------------------------------------------------------------------------------------------------------------#
#                                                        JOB TEST                                                      #
#----------------------------------------------------------------------------------------------------------------------#

# --> JOB TEST INTEGRATION <--#
# ----------------------------#

# --> PHPUNIT FUNCTIONAL
# Example: make phpunit-functional RESET=true
phpunit-functional:
	@if [ "${RESET}" = "true" ]; then make -B init && ${docker-phpunit} pull; fi;
	@ENV_NAME=.env.test.orm && PHP_ENV=php.env.orm && ${docker-phpunit} up -d --build --force-recreate
	@make phpunit-functional-single-strategy DB_STRATEGY=orm ENV_NAME=.env.test.orm PHP_ENV=php.env.orm
	@${docker-phpunit} stop &&  ${docker-phpunit} rm -f

phpunit-functional-single-strategy: init-volumes
	@if [ "${RECREATE}" = "true" ]; then ${docker-phpunit} up -d --build --force-recreate; fi;
	@SERVICE_NAME=default && ${docker-tools} run --rm phpunit phing -f build.xml create:database-$$DB_STRATEGY prepare:folders prepare:configuration functional:unit -Dphpunit.group=functional-$$DB_STRATEGY

# make phpunit-unit group=unit ENV_NAME=.env.test.orm PHP_ENV=php.env.orm
phpunit-unit: init-volumes
	@if [ -z "${group}" ]; then SERVICE_NAME=default && ${docker-tools} run --rm phpunit phing -f build.xml prepare:folders prepare:configuration functional:unit;\
	    else SERVICE_NAME=default && ${docker-tools} run --rm phpunit phing -f build.xml prepare:folders prepare:configuration functional:unit -Dphpunit.group=${group}; fi;

# make phpunit-unit-cmd CMD="/usr/local/bin/phpunit -c app" ENV_NAME=.env.test.orm PHP_ENV=php.env.orm
phpunit-unit-cmd:
	@SERVICE_NAME=default && ${docker-tools} run --rm phpunit $$CMD

# --> JOB TEST ACCEPTATION <--#
# ----------------------------#
# make -B build-infra tools="selenium"
# make job-test-acceptation ENV_NAME=.env.behat.orm PHP_ENV=php.env.orm BEHAT_FILE=behat-project.yml BEHAT_OPTIONS=--suite=auth,--profile=chrome OUTPUT=1
job-test-acceptation: prepare-artifact-analyse
	@if [ -z "$$BEHAT_OPTIONS" ]; then BEHAT_OPTIONS="--profile=chrome"; fi; \
	    if [ -z "$$BEHAT_FILE" ]; then BEHAT_FILE=""; fi; \
	    ${docker-behat} run --rm behat phing -f build.xml system:behat-options -Dbehat.options=$$BEHAT_OPTIONS -Dbehat.file=$$BEHAT_FILE -Doutput.file=$$OUTPUT

# make job-test-acceptation-cmd CMD="behat -vvv -dfield --suite=auth --profile=chrome --config config/behat/behat-project.yml -f pretty" ENV_NAME=.env.behat.orm PHP_ENV=php.env.test.orm
job-test-acceptation-cmd:
	@${docker-behat} run --rm behat $$CMD

#----------------------------------------------------------------------------------------------------------------------#
#                                                        ANALYSE                                                       #
#----------------------------------------------------------------------------------------------------------------------#
# Job list: cpd|dcd|cs|cs-psr2|loc|md|md-specific|pdepend|phpmetrics|phpmetrics2|phpstorm|da|sa|7cc
# make job-analyse-static ANALYSE_PATH=src/ProjectContext ANALYSE_PROJET_ENV=project CPD_TOKENS=70 CPD_LINES=5 tools="cpd"
# make job-analyse-static ANALYSE_PATH=src/ProjectContext ANALYSE_PROJET_ENV=project CS_RULESET=/var/www/app/config/qa/php-cs-ruleset.xml CS_ERRORS=0 CS_WARNING=20 OUTPUT=1 tools="cpd dcd md-specific cs cs-psr2 loc pdepend phpmetrics phpmetrics2 sa 7cc"
job-analyse-static: init-volumes
	@SERVICE_NAME=default && ANALYSE_PATH=$$ANALYSE_PATH && \
	for tool in ${tools}; do ${docker-tools} run --rm qualimetry phing -verbose -f build.xml prepare:artifact-analyse static:$$tool -Dphpcs.ruleset.xml="${CS_RULESET}" -Dphpcs.width="${CS_WIDTH}" -Dphpcs.errors="${CS_ERRORS}" -Dphpcs.warnings="${CS_WARNING}" -Dphpcpd.min.tokens="${CPD_TOKENS}" -Dphpcpd.min.lines="${CPD_LINES}" -Doutput.file="${OUTPUT}" -Dlist.commit.files="${LIST_COMMIT_FILES}"; done

# Job list: rats|psecio-parse|graudit|checker|iniscan|versionscan
# make job-analyse-security tools="rats psecio-parse graudit checker iniscan versionscan"
job-analyse-security: init-volumes
	@SERVICE_NAME=default && ANALYSE_PATH=$$ANALYSE_PATH && \
	for tool in ${tools}; do ${docker-tools} run --rm qualimetry-security phing -f build.xml prepare:artifact-analyse static:security-$$tool; done

# Job list: schemaspy-mysql|schemaspy-pgsql
# make job-analyse-db DB_SCHEMA=public JDK_DRIVER=/openjdk/driver/mysql-jdbc4.jar OUTPUT=1 tools="schemaspy-mysql"
job-analyse-db: init-volumes
	@SERVICE_NAME=${PROJECT_NAME} && ANALYSE_PATH=$$ANALYSE_PATH && ENV_NAME=.env.orm && PHP_ENV=php.env.orm &&  \
	for tool in ${tools}; do ${docker-tools} run --rm qualimetry phing -f build.xml prepare:artifact-analyse static:$$tool -Dproject.dbSchema=$$DB_SCHEMA -Dopenjdk.driver.path=$$JDK_DRIVER -Doutput.file=$$OUTPUT; done

# Job list: evolution|snapshot-v1|snapshot-v2
# make dashboard tools="evolution snapshot-v1 snapshot-v2" ANALYSE_PROJET_ENV=project
dashboard: init-volumes
	@SERVICE_NAME=default && ANALYSE_PATH=$$ANALYSE_PATH && \
	for tool in ${tools}; do ${docker-tools} run --rm php-cmd phing -f build.xml prepare:artifact-analyse dashboard:$$tool; done

########################################################################################################################
####                                           CONCATENATION OF COMMANDS                                            ####
########################################################################################################################
compose:
	@${docker-compose} ${CMD}

phpunit:
	@${docker-phpunit} ${CMD}

tools:
	@${docker-tools} ${CMD}

# make gulp-cmd CMD="npm install --save-dev gulp && npm install && gulp"
gulp-cmd:
	@(sudo rm -rf www/web/integration) || true
	@SERVICE_NAME=default && ${docker-tools} run --rm integration ${CMD}
	@(sudo chown -Rf ${USER}: www/web) || true

top:
	#@watch -n 0,01 "docker top $${name}"
	@docker run -ti --name ctop --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/vektorlab/ctop:latest

audit-security:
	@docker run -it --net host --pid host --cap-add audit_control \
        -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
        -v /var/lib:/var/lib \
        -v /var/run/docker.sock:/var/run/docker.sock \
        -v /usr/lib/systemd:/usr/lib/systemd \
        -v /etc:/etc --label docker_bench_security \
        docker/docker-bench-security
